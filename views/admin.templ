package views

import (
	"strings"
	"woody-wood-portail/cmd/config"
	c "woody-wood-portail/cmd/ctx"
	"woody-wood-portail/cmd/services/db"
	"woody-wood-portail/cmd/timezone"
	components "woody-wood-portail/views/components"
)

type AdminInvitationFormModel struct {
	Code   string
	QrCode string
	Err    string
}

type AdminUsersPageModel struct {
	Users    []db.User
	Pending  []db.User
	Rejected []db.User
}

templ adminPage() {
	@html("Woody Wood Gate - Admin") {
		<div class="h-dvh flex flex-col">
			<div class="overflow-scroll p-2 flex-1">
				{ children... }
			</div>
			@menu()
		</div>
	}
}

templ AdminInvitationPage(model *AdminInvitationFormModel) {
	@adminPage() {
		@AdminInvitationForm(model)
	}
}

templ AdminUsersPage(model *AdminUsersPageModel) {
	@adminPage() {
		@components.Card("Inscriptions en attentes") {
			if len(model.Pending) == 0 {
				<p class="text-center"><span class="text-3xl">üòé</span><br/>Aucune inscription en attente</p>
			}
			<ul id="pending-list">
				for _, user := range model.Pending {
					@AdminPendingRow(&AdminUserRowModel{User: user})
				}
			</ul>
		}
		@components.Card("Utilisateurs") {
			<ul id="accepted-list">
				for _, user := range model.Users {
					@AdminAcceptedRow(&AdminUserRowModel{User: user})
				}
			</ul>
		}
		@components.Card("Inscriptions refus√©es") {
			if len(model.Rejected) == 0 {
				<p class="text-center"><span class="text-3xl">üòá</span><br/>Aucune inscription refus√©e</p>
			}
			<ul id="rejected-list">
				for _, user := range model.Rejected {
					@AdminRejectedRow(&AdminUserRowModel{User: user})
				}
			</ul>
		}
	}
}

type AdminUserRowModel struct {
	User  db.User
	Err   error
	Attrs templ.Attributes
}

type AdminUserPageModel struct {
	Form AdminUserFormModel
	Logs []db.Log
}

type AdminUserFormModel struct {
	components.FormModel
	User db.User
}

type AdminUserValues struct {
	Role      string `form:"Role"      tr:"Role"        validate:"required"`
	Apartment string `form:"Apartment" tr:"Appartement" validate:"required,len=4,apartment"`
	FullName  string `form:"FullName"  tr:"Nom complet" validate:"required"`
	Email     string `form:"Email"     tr:"Email"       validate:"required,email"`
}

templ AdminUserPage(model *AdminUserPageModel) {
	@adminPage() {
		@AdminUserForm(&model.Form)
		@AdminUserLogs(model)
	}
}

templ AdminUserForm(model *AdminUserFormModel) {
	@components.Form(model.User.FullName, model.FormModel, "PUT") {
		<div>
			Inscrit depuis le { model.User.CreatedAt.Time.In(timezone.TZ).Format("02/01/2006") }
		</div>
		<label class="flex gap-2 items-center">
			Role
			@components.SelectField(components.SelectFieldModel{
				FieldModel: components.FieldModel{
					Name:     "Role",
					Default:  model.User.Role,
					Required: true,
				},
				Options: []components.SelectFieldOption{
					{Value: "user", Label: "Utilisateur"},
					{Value: "admin", Label: "Administrateur"},
				},
			})
		</label>
		<hr class="my-2"/>
		<label class="flex gap-2 items-center">
			Appartement
			@components.Field(components.FieldModel{
				Label:   "Appartement",
				Name:    "Apartment",
				Default: model.User.Apartment,
				Attrs:   templ.Attributes{"class": "flex-1 w-full"},
			})
		</label>
		<label class="flex gap-2 items-center">
			Nom complet
			@components.Field(components.FieldModel{
				Label:   "Nom Complet",
				Name:    "FullName",
				Default: model.User.FullName,
				Attrs:   templ.Attributes{"class": "flex-1 w-full"},
			})
		</label>
		<label class="flex gap-2 items-center">
			Email
			@components.Field(components.FieldModel{
				Label:   "Email",
				Name:    "Email",
				Default: model.User.Email,
				Attrs:   templ.Attributes{"class": "flex-1 w-full"},
			})
		</label>
		@components.Button() {
			Enregistrer
		}
	}
}

templ AdminUserLogs(model *AdminUserPageModel) {
	@components.Card("Demandes d'ouverture") {
		if model.Logs == nil || len(model.Logs) == 0 {
			<p class="text-center"><span class="text-3xl">üëÄ</span><br/>Aucune demande d'ouverture</p>
		} else {
			<ul>
				for _, log := range model.Logs {
					<li>
						{ log.CreatedAt.Time.In(timezone.TZ).Format("02/01/2006 15:04:05") }
					</li>
				}
			</ul>
		}
	}
}

templ AdminPendingRow(model *AdminUserRowModel) {
	<li { model.Attrs... } hx-swap="outerHTML" hx-target="this">
		<div class="flex justify-between items-center">
			<div class={ templ.KV("line-through", model.User.RegistrationState == "rejected") }>
				{ model.User.Apartment } : { model.User.FullName }
			</div>
			<div class="flex gap-2">
				<button hx-put={ "/admin/registrations/" + model.User.ID.String() + "/accept" } title="Accepter">‚úÖ</button>
				<button hx-put={ "/admin/registrations/" + model.User.ID.String() + "/reject" } title="Refuser">‚ùå</button>
			</div>
		</div>
		if model.Err != nil {
			<div class="text-red-500 text-xs">Une erreur est survenue : { model.Err.Error() }</div>
		}
	</li>
}

templ AdminRejectedRow(model *AdminUserRowModel) {
	<li { model.Attrs... } hx-swap="outerHTML" hx-target="this">
		<div class="flex justify-between items-center">
			<div>
				{ model.User.Apartment } : { model.User.FullName }
			</div>
			<div class="flex gap-2">
				<button hx-put={ "/admin/registrations/" + model.User.ID.String() + "/reset" } title="Mettre en attente">üîÑ</button>
				<button hx-delete={ "/admin/registrations/" + model.User.ID.String() + "" } title="Supprimer le compte">üóëÔ∏è</button>
			</div>
		</div>
		if model.Err != nil {
			<div class="text-red-500 text-xs">Une erreur est survenue : { model.Err.Error() }</div>
		}
	</li>
}

templ AdminAcceptedRow(model *AdminUserRowModel) {
	<li { model.Attrs... } hx-swap="outerHTML" hx-target="this">
		<a class="flex gap-2 items-center w-full" href={ templ.SafeURL("/admin/users/" + model.User.ID.String()) }>
			<div>{ model.User.Apartment } :</div>
			<div class="flex-1">{ model.User.FullName }</div>
			<div>Ôºû</div>
		</a>
	</li>
}

templ AdminInvitationForm(model *AdminInvitationFormModel) {
	@components.Form("Portail Connect√©", components.NewFormError(model.Err), "POST") {
		<p class="text-lg my-4 text-center">Il est d√©sormais possible d'ouvrir le portail √† l'aide de votre t√©l√©phone.</p>
		<p>Scannez ce QR code pour vous inscrire </p>
		<img width="256" height="256" src={ model.QrCode } class="m-auto"/>
		<p class="text-center">
			Ou rendez-vous sur 
			<br/>
			<span class="text-blue-500">{ strings.Split(config.Config.Http.BaseURL, "://")[1] + "/register" }</span>
			<br/>
			et utilisez le code d'invitation
			<strong>{ model.Code }</strong>.
		</p>
		@components.Button(templ.Attributes{"class": "print:hidden"}) {
			G√©n√©rer un nouveau code
		}
	}
}

templ menu() {
	<nav class="h-12 w-full border-t print:hidden sm:h-dvh sm:min-w-40 sm:w-1/5 sm:fixed sm:left-0">
		<h1 class="p-2 hidden sm:block border-r">Woody Wood Gate</h1>
		<ul class="sm:pt-2 border-r h-full w-full flex items-center sm:flex-col sm:justify-start sm:items-start">
			<li class="border-r h-full sm:border-b sm:h-fit sm:w-full"></li>
			<li class="px-3 sm:px-2 sm:py-2"><a href="/user">üè†<span class="hidden sm:inline">&nbsp;Accueil</span></a></li>
			<li class="border-r h-full sm:border-b sm:h-fit sm:w-full"></li>
			@menuItem("/admin/users") {
				Utilisateurs
			}
			<li class="border-r h-full sm:border-b sm:h-fit sm:w-full"></li>
			@menuItem("/admin/invitation") {
				Code d'invitation
			}
			<li class="border-r h-full sm:border-b sm:h-fit sm:w-full"></li>
			<li class="px-4 sm:px-2 sm:py-2"><a href="/logout">‚éã<span class="hidden sm:inline">&nbsp;Se d√©conecter</span></a></li>
		</ul>
	</nav>
}

templ menuItem(link templ.SafeURL) {
	{{
		isCurrent := strings.HasPrefix(c.GetEchoFromTempl(ctx).Request().URL.Path, string(link))
	}}
	<li class={ "sm:justify-start sm:w-full sm:p-2 sm:flex-none sm:h-fit flex-1 text-center h-full flex items-center justify-center", templ.KV("bg-slate-100", isCurrent) }>
		<a href={ link } class={ templ.KV("font-bold", isCurrent) }>
			{ children... }
		</a>
	</li>
}
