package views

import (
	"github.com/go-playground/validator/v10"
	"net/url"
)

var (
	authFormClass = "w-80 rounded m-auto p-4 mt-20 shadow-md flex flex-col gap-2"
)

type FormModel struct {
	Values url.Values
	Errors Errors
}

type Errors struct {
	Global string
	Fields validator.ValidationErrorsTranslations
}

type FieldModel struct {
	FormModel
	Label    string
	Name     string
	Required bool
	Type     string
	Attrs    templ.Attributes
}

func NewFormError(message string, values ...url.Values) FormModel {
	var v url.Values
	if len(values) == 0 {
		v = url.Values{}
	} else {
		v = values[0]
	}
	model := NewFormModel(v, nil)
	model.Errors.Global = message
	return model
}

func NewFormModel(values url.Values, fieldErrors validator.ValidationErrorsTranslations) FormModel {
	model := FormModel{
		Values: values,
		Errors: Errors{
			Fields: fieldErrors,
		},
	}

	if model.Errors.Fields == nil {
		model.Errors.Fields = validator.ValidationErrorsTranslations{}
	}
	if model.Values == nil {
		model.Values = url.Values{}
	}

	return model
}

templ Field(model FieldModel) {
	<input
		name={ model.Name }
		placeholder={ model.Label }
		class={
			templ.KV("border-red-500", model.Errors.Fields[model.Name] != ""),
			"border rounded-sm py-1 px-3",
			model.Attrs["class"],
		}
		if model.Required {
			required
		}
		if model.Type != "" {
			type={ model.Type }
		}
		{ model.Attrs... }
		value={ model.Values.Get(model.Name) }
	/>
	@FormError(model.Errors.Fields[model.Name])
}

templ Button(attrs ...templ.Attributes) {
	<button
		class={
			"bg-blue-500 text-white py-1 px-3 rounded-sm relative",
			"disabled:opacity-50 disabled:cursor-not-allowed transition-opacity",
			expect1(attrs)["class"],
		}
		{ expect1(attrs)... }
	>
		<img src="/static/images/spinner.svg" class="show-when-loading h-8 absolute inset-0 m-auto"/>
		<span class="hide-when-loading">
			{ children... }
		</span>
	</button>
}

templ FormError(err string, attrs ...templ.Attributes) {
	if err != "" {
		<span { expect1(attrs)... } class="text-red-500 text-center">{ " " + err }</span>
	}
}

templ AuthForm(title string, model FormModel, attrs ...templ.Attributes) {
	@Card(title) {
		<form
			{ expect1(attrs)... }
			hx-post
			hx-swap="outerHTML"
			hx-disabled-elt="button"
			class="flex flex-col gap-2 [&_button]:last-of-type:mt-4"
		>
			<h1 class="text-2xl mb-4 text-center">
				{ title }
			</h1>
			{ children... }
			@FormError(model.Errors.Global)
		</form>
	}
}

templ Card(title string) {
	<div
		class="w-80 rounded m-auto p-4 mt-20 shadow-md flex flex-col gap-2 print:shadow-none"
	>
		<h1 class="text-2xl mb-4 text-center">
			{ title }
		</h1>
		{ children... }
	</div>
}

templ AuthFooter(attrs ...templ.Attributes) {
	<p { expect1(attrs)... } class="w-80 m-auto mt-10 text-center">
		{ children... }
	</p>
}
