// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createLog = `-- name: CreateLog :one
insert into "logs" (user_id) values ($1) returning id, user_id, created_at
`

func (q *Queries) CreateLog(ctx context.Context, userID uuid.UUID) (Log, error) {
	row := q.db.QueryRow(ctx, createLog, userID)
	var i Log
	err := row.Scan(&i.ID, &i.UserID, &i.CreatedAt)
	return i, err
}

const createUser = `-- name: CreateUser :one
insert into "users" (email, full_name, apartment, pwd_salt, pwd_hash, pwd_iterations, pwd_parallelism, pwd_memory, pwd_version, "role") 
values (
  $1, $2, $3, $4, $5, $6, $7, $8, $9,
  (select (case when count(id) = 0 then 'admin' else 'user' end) role from "users")
) 
returning id, email, full_name, apartment, pwd_salt, pwd_hash, pwd_iterations, pwd_parallelism, pwd_memory, pwd_version, role, email_verified, created_at, updated_at
`

type CreateUserParams struct {
	Email          string
	FullName       string
	Apartment      string
	PwdSalt        string
	PwdHash        string
	PwdIterations  int32
	PwdParallelism int16
	PwdMemory      int32
	PwdVersion     int32
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.FullName,
		arg.Apartment,
		arg.PwdSalt,
		arg.PwdHash,
		arg.PwdIterations,
		arg.PwdParallelism,
		arg.PwdMemory,
		arg.PwdVersion,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.Apartment,
		&i.PwdSalt,
		&i.PwdHash,
		&i.PwdIterations,
		&i.PwdParallelism,
		&i.PwdMemory,
		&i.PwdVersion,
		&i.Role,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
delete from "users" where id = $1 returning id, email, full_name, apartment, pwd_salt, pwd_hash, pwd_iterations, pwd_parallelism, pwd_memory, pwd_version, role, email_verified, created_at, updated_at
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.Apartment,
		&i.PwdSalt,
		&i.PwdHash,
		&i.PwdIterations,
		&i.PwdParallelism,
		&i.PwdMemory,
		&i.PwdVersion,
		&i.Role,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const dropAllUsers = `-- name: DropAllUsers :exec
delete from "users"
`

func (q *Queries) DropAllUsers(ctx context.Context) error {
	_, err := q.db.Exec(ctx, dropAllUsers)
	return err
}

const emailVerified = `-- name: EmailVerified :exec
update "users" set email_verified = true where id = $1
`

func (q *Queries) EmailVerified(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, emailVerified, id)
	return err
}

const getUser = `-- name: GetUser :one
select id, email, full_name, apartment, pwd_salt, pwd_hash, pwd_iterations, pwd_parallelism, pwd_memory, pwd_version, role, email_verified, created_at, updated_at from "users" where id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.Apartment,
		&i.PwdSalt,
		&i.PwdHash,
		&i.PwdIterations,
		&i.PwdParallelism,
		&i.PwdMemory,
		&i.PwdVersion,
		&i.Role,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, email, full_name, apartment, pwd_salt, pwd_hash, pwd_iterations, pwd_parallelism, pwd_memory, pwd_version, role, email_verified, created_at, updated_at from "users" where email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.Apartment,
		&i.PwdSalt,
		&i.PwdHash,
		&i.PwdIterations,
		&i.PwdParallelism,
		&i.PwdMemory,
		&i.PwdVersion,
		&i.Role,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listLogs = `-- name: ListLogs :many
select id, user_id, created_at from "logs"
`

func (q *Queries) ListLogs(ctx context.Context) ([]Log, error) {
	rows, err := q.db.Query(ctx, listLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(&i.ID, &i.UserID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLogsByUser = `-- name: ListLogsByUser :many
select id, user_id, created_at from "logs" where user_id = $1
`

func (q *Queries) ListLogsByUser(ctx context.Context, userID uuid.UUID) ([]Log, error) {
	rows, err := q.db.Query(ctx, listLogsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(&i.ID, &i.UserID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
select id, email, full_name, apartment, pwd_salt, pwd_hash, pwd_iterations, pwd_parallelism, pwd_memory, pwd_version, role, email_verified, created_at, updated_at from "users"
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FullName,
			&i.Apartment,
			&i.PwdSalt,
			&i.PwdHash,
			&i.PwdIterations,
			&i.PwdParallelism,
			&i.PwdMemory,
			&i.PwdVersion,
			&i.Role,
			&i.EmailVerified,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePassword = `-- name: UpdatePassword :exec
update "users" set pwd_salt = $2, pwd_hash = $3, pwd_iterations = $4, pwd_parallelism = $5, pwd_memory = $6, pwd_version = $7 where id = $1
`

type UpdatePasswordParams struct {
	ID             uuid.UUID
	PwdSalt        string
	PwdHash        string
	PwdIterations  int32
	PwdParallelism int16
	PwdMemory      int32
	PwdVersion     int32
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword,
		arg.ID,
		arg.PwdSalt,
		arg.PwdHash,
		arg.PwdIterations,
		arg.PwdParallelism,
		arg.PwdMemory,
		arg.PwdVersion,
	)
	return err
}
